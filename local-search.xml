<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GO</title>
    <link href="/2022/06/05/GO/"/>
    <url>/2022/06/05/GO/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go 实现二分查找算法</title>
    <link href="/2022/06/05/Go%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/05/Go%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-实现二分查找算法"><a href="#Go-实现二分查找算法" class="headerlink" title="Go 实现二分查找算法"></a>Go 实现二分查找算法</h2><p>二分查找算法简介：二分查找算法对有序数组有效，二分搜索是查找数组中的目标值。</p><p>在一个有序数组中，将数组分成两段，将要查询的铁元素和分割点比较：</p><ol><li>如果相等，直接返回，说明数据找到</li><li>目标元素大于分割点，在分割点右边继续查找</li><li>元素小于分割点，在分割点左侧继续查找</li></ol><p><img src="https://zh.wikipedia.org/wiki/File:Binary_search_into_array.png"></p><h3 id="二分查找算法模板："><a href="#二分查找算法模板：" class="headerlink" title="二分查找算法模板："></a>二分查找算法模板：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = ...;<br><br>    <span class="hljs-keyword">while</span>(...) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (right + left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            left = ...<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            right = ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ...;<br>&#125;<br></code></pre></td></tr></table></figure><p>再有个标准写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">BinarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> array[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> value)</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//如果这里是int right = n 的话，那么下面有两处地方需要修改，以保证一一对应：</span><br>    <span class="hljs-comment">//1、下面循环的条件则是while(left &lt; right)</span><br>    <span class="hljs-comment">//2、循环内当 array[middle] &gt; value 的时候，right = mid</span><br><br>    <span class="hljs-keyword">while</span> (left &lt;= right)  <span class="hljs-comment">//循环条件，适时而变</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>);  <span class="hljs-comment">//防止溢出，移位也更高效。同时，每次循环都需要更新。</span><br><br>        <span class="hljs-keyword">if</span> (array[middle] &gt; value)<br>        &#123;<br>            right = middle - <span class="hljs-number">1</span>;  <span class="hljs-comment">//right赋值，适时而变</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(array[middle] &lt; value)<br>        &#123;<br>            left = middle + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> middle;<br>        <span class="hljs-comment">//可能会有读者认为刚开始时就要判断相等，但毕竟数组中不相等的情况更多</span><br>        <span class="hljs-comment">//如果每次循环都判断一下是否相等，将耗费时间</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Go-二分查找算法"><a href="#Go-二分查找算法" class="headerlink" title="Go-二分查找算法"></a>Go-二分查找算法</h3><p>给定一个有序数组，查找第一个等于 target 的下标，找不到返回 -1.</p><p>代码中有一个要注意的是溢出问题： <code>    mid := low + ((high - low) &gt;&gt; 1) // 溢出</code></p><p>代码实现如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> algorithm<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(arr []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    low := <span class="hljs-number">0</span><br>    high := <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> low &lt;= high &#123;<br>        <span class="hljs-comment">//mid := (low + high) / 2</span><br>        mid := low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-comment">//fmt.Println(mid)</span><br>        <span class="hljs-keyword">if</span> arr[mid] &gt; target &#123;<br>            high = mid - <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arr[mid] &lt; target &#123;<br>            low = mid + <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestBinarySearch</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-comment">/*arr := make([]int, 1024*1024, 1024*1024)</span><br><span class="hljs-comment">    for i := 0; i &lt; 1024*1024; i++ &#123;</span><br><span class="hljs-comment">        arr[i] = i + 1</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//arr := []int&#123;1, 9, 10, 30, 2, 5, 45, 8, 63, 234, 12&#125;</span><br>    <span class="hljs-comment">//QuickSort(arr, 0, len(arr)-1)</span><br>    <span class="hljs-comment">//fmt.Println(arr)</span><br>    arr := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">63</span>, <span class="hljs-number">234</span>&#125;<br><br>    id := binarySearch(arr, <span class="hljs-number">9</span>)<br>    <span class="hljs-keyword">if</span> id != <span class="hljs-number">-1</span> &#123;<br>        fmt.Println(id, arr[id])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;没有找到数据&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">=== RUN   TestBinarySearch<br><span class="hljs-number">3</span> <span class="hljs-number">8</span><br>--- PASS: TestBinarySearch (<span class="hljs-number">0.00</span>s)<br>PASS<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/05/hello-world/"/>
    <url>/2022/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
